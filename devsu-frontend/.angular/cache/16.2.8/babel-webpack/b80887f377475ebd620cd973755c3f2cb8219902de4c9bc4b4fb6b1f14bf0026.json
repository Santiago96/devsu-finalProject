{"ast":null,"code":"import { map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class ClientService {\n  constructor(http) {\n    this.http = http;\n    this.apiUrl = 'http:localhost:8080';\n  }\n  getAllClients() {\n    return this.http.get(`${this.apiUrl}/cliente`).pipe(map(response => response));\n  }\n  static #_ = this.ɵfac = function ClientService_Factory(t) {\n    return new (t || ClientService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: ClientService,\n    factory: ClientService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["map","ClientService","constructor","http","apiUrl","getAllClients","get","pipe","response","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\Santiago Collazos\\Documents\\devsu-frontend\\devsu-bank\\src\\app\\services\\client.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\nimport { HttpClient } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { Client } from '../client/cliente';\nimport { map, catchError } from 'rxjs/operators';\n\n\nimport { Router } from '@angular/router';\n\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ClientService {\n\n  private apiUrl = 'http:localhost:8080'; \n\n  constructor(private http: HttpClient) { }\n\n  getAllClients(): Observable<Client[]> {\n    return this.http.get(`${this.apiUrl}/cliente`).pipe(\n  \t\tmap( response => response as Client[])\n  \t\t);\n  }\n}\n\n"],"mappings":"AAKA,SAASA,GAAG,QAAoB,gBAAgB;;;AAShD,OAAM,MAAOC,aAAa;EAIxBC,YAAoBC,IAAgB;IAAhB,KAAAA,IAAI,GAAJA,IAAI;IAFhB,KAAAC,MAAM,GAAG,qBAAqB;EAEE;EAExCC,aAAaA,CAAA;IACX,OAAO,IAAI,CAACF,IAAI,CAACG,GAAG,CAAC,GAAG,IAAI,CAACF,MAAM,UAAU,CAAC,CAACG,IAAI,CACnDP,GAAG,CAAEQ,QAAQ,IAAIA,QAAoB,CAAC,CACrC;EACH;EAAC,QAAAC,CAAA,G;qBAVUR,aAAa,EAAAS,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAbb,aAAa;IAAAc,OAAA,EAAbd,aAAa,CAAAe,IAAA;IAAAC,UAAA,EAFZ;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}